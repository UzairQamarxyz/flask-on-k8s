name: Flask App CI/CD

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  check-paths:
    runs-on: ${{ vars.RUNNER_OS }}
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - 'app/Dockerfile'
            app:
              - 'app/**'
          base: "origin/main"

  sast:
    runs-on: ${{ vars.RUNNER_OS }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install Bandit
        run: pip install bandit
      - name: Run Bandit
        run: bandit -r app -ll

  dependency-scan:
    runs-on: ${{ vars.RUNNER_OS }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install pip-audit
        run: pip install pip-audit
      - name: Run Dependency Audit
        run: pip-audit -r app/requirements.txt

  tests:
    runs-on: ${{ vars.RUNNER_OS }}
    needs: [sast, dependency-scan]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r app/requirements.txt
      - name: Run pytest
        run: pytest -v app/

  lint-dockerfile:
    runs-on: ${{ vars.RUNNER_OS }}
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./app/Dockerfile

  build-docker:
    runs-on: ${{ vars.RUNNER_OS }}
    needs: lint-dockerfile
    if: needs.check-paths.outputs.docker == 'true' || needs.check-paths.outputs.app == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t flask:${{ github.sha }} ./app/
      - name: Save Docker image
        run: docker save flask:${{ github.sha }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  scan-docker:
    runs-on: ${{ vars.RUNNER_OS }}
    needs: build-docker
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: flask:${{ github.sha }}
          exit-code: 1
          severity: HIGH,CRITICAL

  push-docker:
    runs-on: ${{ vars.RUNNER_OS }}
    needs: scan-docker
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
      - name: Load Docker image
        run: docker load -i image.tar
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker tag flask:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/flask:latest
          docker tag flask:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/flask:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask:latest
